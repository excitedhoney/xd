//
//  ecc_sm2.h
//  O_AllMacShared
//
//  Created by YXCD on 13-11-13.
//  Copyright (c) 2013å¹´ YXCD. All rights reserved.
//

#include "keyhi.h"

#ifdef NSS_ENABLE_ECC
typedef struct curveNameTagPairStr {
    char *curveName;
    SECOidTag curveOidTag;
} CurveNameTagPair;

#define DEFAULT_CURVE_OID_TAG  SEC_OID_SECG_EC_SECP192R1
/* #define DEFAULT_CURVE_OID_TAG  SEC_OID_SECG_EC_SECP160R1 */

static CurveNameTagPair nameTagPair[] =
{
    { "sect163k1", SEC_OID_SECG_EC_SECT163K1},
    { "nistk163", SEC_OID_SECG_EC_SECT163K1},
    { "sect163r1", SEC_OID_SECG_EC_SECT163R1},
    { "sect163r2", SEC_OID_SECG_EC_SECT163R2},
    { "nistb163", SEC_OID_SECG_EC_SECT163R2},
    { "sect193r1", SEC_OID_SECG_EC_SECT193R1},
    { "sect193r2", SEC_OID_SECG_EC_SECT193R2},
    { "sect233k1", SEC_OID_SECG_EC_SECT233K1},
    { "nistk233", SEC_OID_SECG_EC_SECT233K1},
    { "sect233r1", SEC_OID_SECG_EC_SECT233R1},
    { "nistb233", SEC_OID_SECG_EC_SECT233R1},
    { "sect239k1", SEC_OID_SECG_EC_SECT239K1},
    { "sect283k1", SEC_OID_SECG_EC_SECT283K1},
    { "nistk283", SEC_OID_SECG_EC_SECT283K1},
    { "sect283r1", SEC_OID_SECG_EC_SECT283R1},
    { "nistb283", SEC_OID_SECG_EC_SECT283R1},
    { "sect409k1", SEC_OID_SECG_EC_SECT409K1},
    { "nistk409", SEC_OID_SECG_EC_SECT409K1},
    { "sect409r1", SEC_OID_SECG_EC_SECT409R1},
    { "nistb409", SEC_OID_SECG_EC_SECT409R1},
    { "sect571k1", SEC_OID_SECG_EC_SECT571K1},
    { "nistk571", SEC_OID_SECG_EC_SECT571K1},
    { "sect571r1", SEC_OID_SECG_EC_SECT571R1},
    { "nistb571", SEC_OID_SECG_EC_SECT571R1},
    { "secp160k1", SEC_OID_SECG_EC_SECP160K1},
    { "secp160r1", SEC_OID_SECG_EC_SECP160R1},
    { "secp160r2", SEC_OID_SECG_EC_SECP160R2},
    { "secp192k1", SEC_OID_SECG_EC_SECP192K1},
    { "secp192r1", SEC_OID_SECG_EC_SECP192R1},
    { "nistp192", SEC_OID_SECG_EC_SECP192R1},
    { "secp224k1", SEC_OID_SECG_EC_SECP224K1},
    { "secp224r1", SEC_OID_SECG_EC_SECP224R1},
    { "nistp224", SEC_OID_SECG_EC_SECP224R1},
    { "secp256k1", SEC_OID_SECG_EC_SECP256K1},
    { "secp256r1", SEC_OID_SECG_EC_SECP256R1},
    { "nistp256", SEC_OID_SECG_EC_SECP256R1},
    { "secp384r1", SEC_OID_SECG_EC_SECP384R1},
    { "nistp384", SEC_OID_SECG_EC_SECP384R1},
    { "secp521r1", SEC_OID_SECG_EC_SECP521R1},
    { "nistp521", SEC_OID_SECG_EC_SECP521R1},
    
    { "prime192v1", SEC_OID_ANSIX962_EC_PRIME192V1 },
    { "prime192v2", SEC_OID_ANSIX962_EC_PRIME192V2 },
    { "prime192v3", SEC_OID_ANSIX962_EC_PRIME192V3 },
    { "prime239v1", SEC_OID_ANSIX962_EC_PRIME239V1 },
    { "prime239v2", SEC_OID_ANSIX962_EC_PRIME239V2 },
    { "prime239v3", SEC_OID_ANSIX962_EC_PRIME239V3 },
    
    { "c2pnb163v1", SEC_OID_ANSIX962_EC_C2PNB163V1 },
    { "c2pnb163v2", SEC_OID_ANSIX962_EC_C2PNB163V2 },
    { "c2pnb163v3", SEC_OID_ANSIX962_EC_C2PNB163V3 },
    { "c2pnb176v1", SEC_OID_ANSIX962_EC_C2PNB176V1 },
    { "c2tnb191v1", SEC_OID_ANSIX962_EC_C2TNB191V1 },
    { "c2tnb191v2", SEC_OID_ANSIX962_EC_C2TNB191V2 },
    { "c2tnb191v3", SEC_OID_ANSIX962_EC_C2TNB191V3 },
    { "c2onb191v4", SEC_OID_ANSIX962_EC_C2ONB191V4 },
    { "c2onb191v5", SEC_OID_ANSIX962_EC_C2ONB191V5 },
    { "c2pnb208w1", SEC_OID_ANSIX962_EC_C2PNB208W1 },
    { "c2tnb239v1", SEC_OID_ANSIX962_EC_C2TNB239V1 },
    { "c2tnb239v2", SEC_OID_ANSIX962_EC_C2TNB239V2 },
    { "c2tnb239v3", SEC_OID_ANSIX962_EC_C2TNB239V3 },
    { "c2onb239v4", SEC_OID_ANSIX962_EC_C2ONB239V4 },
    { "c2onb239v5", SEC_OID_ANSIX962_EC_C2ONB239V5 },
    { "c2pnb272w1", SEC_OID_ANSIX962_EC_C2PNB272W1 },
    { "c2pnb304w1", SEC_OID_ANSIX962_EC_C2PNB304W1 },
    { "c2tnb359v1", SEC_OID_ANSIX962_EC_C2TNB359V1 },
    { "c2pnb368w1", SEC_OID_ANSIX962_EC_C2PNB368W1 },
    { "c2tnb431r1", SEC_OID_ANSIX962_EC_C2TNB431R1 },
    
    { "secp112r1", SEC_OID_SECG_EC_SECP112R1},
    { "secp112r2", SEC_OID_SECG_EC_SECP112R2},
    { "secp128r1", SEC_OID_SECG_EC_SECP128R1},
    { "secp128r2", SEC_OID_SECG_EC_SECP128R2},
    
    { "sect113r1", SEC_OID_SECG_EC_SECT113R1},
    { "sect113r2", SEC_OID_SECG_EC_SECT113R2},
    { "sect131r1", SEC_OID_SECG_EC_SECT131R1},
    { "sect131r2", SEC_OID_SECG_EC_SECT131R2},
    
    { "nistp256SM2", SEC_OID_EC_NIST_P256_SM2},
};

static SECKEYECParams *getECParams(const char *curve)
{
    SECKEYECParams *ecparams;
    SECOidData *oidData = NULL;
    SECOidTag curveOidTag = SEC_OID_UNKNOWN; /* default */
    int i, numCurves;
    
    if (curve != NULL) {
        numCurves = sizeof(nameTagPair)/sizeof(CurveNameTagPair);
        for (i = 0; ((i < numCurves) && (curveOidTag == SEC_OID_UNKNOWN));
             i++) {
            if (PL_strcmp(curve, nameTagPair[i].curveName) == 0)
                curveOidTag = nameTagPair[i].curveOidTag;
        }
    }
    
    /* Return NULL if curve name is not recognized */
    if ((curveOidTag == SEC_OID_UNKNOWN) ||
        (oidData = SECOID_FindOIDByTag(curveOidTag)) == NULL) {
        fprintf(stderr, "Unrecognized elliptic curve %s\n", curve);
        return NULL;
    }
    
    ecparams = SECITEM_AllocItem(NULL, NULL, (2 + oidData->oid.len));
    
    /*
     * ecparams->data needs to contain the ASN encoding of an object ID (OID)
     * representing the named curve. The actual OID is in
     * oidData->oid.data so we simply prepend 0x06 and OID length
     */
    ecparams->data[0] = SEC_ASN1_OBJECT_ID;
    ecparams->data[1] = oidData->oid.len;
    memcpy(ecparams->data + 2, oidData->oid.data, oidData->oid.len);
    
    return ecparams;
}
#endif /* NSS_ENABLE_ECC */

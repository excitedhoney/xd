Index: ecdecode.c
===================================================================
--- ecdecode.c	(版本 235644)
+++ ecdecode.c	(工作副本)
@@ -552,6 +552,15 @@
 	CHECK_SEC_OK( gf_populate_params(ECCurve_SECG_PRIME_521R1, ec_field_GFp,
 	    params) );
 	break;
+            //add by liqiangqiang from
+    case SEC_OID_EC_NIST_P256_SM2:
+        /* Populate params for prime256v1 aka secp256r1
+            * (the NIST P-256 curve)
+            */
+        CHECK_SEC_OK( gf_populate_params(ECCurve_NIST_P256_SM2, ec_field_GFp,
+                                            params) );
+        break;
+            //add by liqiangqiang to
 
     default:
 	break;
Index: fipstest.c
===================================================================
--- fipstest.c	(版本 235644)
+++ fipstest.c	(工作副本)
@@ -1094,6 +1094,18 @@
         }
         shaLength = SHA256_LENGTH;
         shaOid = SEC_OID_SHA256;
+        
+        
+        //add by liqiangqiang from
+    }else if (shaAlg == HASH_AlgSM3) {
+        if (SM3_HashBuf(sha, rsa_known_msg, rsa_kmsg_length)
+            != SECSuccess) {
+            goto loser;
+        }
+        shaLength = SM3_LENGTH;
+        shaOid = SEC_OID_SM3;
+        //add by liqiangqiang to
+        
     } else if (shaAlg == HASH_AlgSHA384) {
         if (SHA384_HashBuf(sha, rsa_known_msg, rsa_kmsg_length)
                             != SECSuccess) {
Index: lowpbe.c
===================================================================
--- lowpbe.c	(版本 235644)
+++ lowpbe.c	(工作副本)
@@ -793,13 +793,15 @@
     	return HASH_AlgSHA1;
     case SEC_OID_HMAC_SHA256:
     	return HASH_AlgSHA256;
-    case SEC_OID_HMAC_SHA384:
-    	return HASH_AlgSHA384;
-    case SEC_OID_HMAC_SHA512:
-    	return HASH_AlgSHA512;
-    case SEC_OID_HMAC_SHA224:
-    default:
-	break;
+        case SEC_OID_HMAC_SM3:	//add by liqiangqiang
+            return HASH_AlgSM3;   //add by liqiangqiang
+        case SEC_OID_HMAC_SHA384:
+            return HASH_AlgSHA384;
+        case SEC_OID_HMAC_SHA512:
+            return HASH_AlgSHA512;
+        case SEC_OID_HMAC_SHA224:
+        default:
+            break;
     }
     return HASH_AlgNULL;
 }
Index: pkcs11.c
===================================================================
--- pkcs11.c	(版本 235644)
+++ pkcs11.c	(工作副本)
@@ -65,9 +65,9 @@
  */
 
 /* The next three strings must be exactly 32 characters long */
-static char *manufacturerID      = "Mozilla Foundation              ";
+static char *manufacturerID      = "itrusChina                      ";
 static char manufacturerID_space[33];
-static char *libraryDescription  = "NSS Internal Crypto Services    ";
+static char *libraryDescription  = "itrus Internal Crypto Services  ";
 static char libraryDescription_space[33];
 
 /*
@@ -385,6 +385,7 @@
      {CKM_SHA224_HMAC,		{1, 128, CKF_SN_VR},		PR_TRUE},
      {CKM_SHA224_HMAC_GENERAL,	{1, 128, CKF_SN_VR},		PR_TRUE},
      {CKM_SHA256,		{0,   0, CKF_DIGEST},		PR_FALSE},
+     {CKM_SM3,		{0,   0, CKF_DIGEST},		PR_FALSE},   //add by liqiangqiang
      {CKM_SHA256_HMAC,		{1, 128, CKF_SN_VR},		PR_TRUE},
      {CKM_SHA256_HMAC_GENERAL,	{1, 128, CKF_SN_VR},		PR_TRUE},
      {CKM_SHA384,		{0,   0, CKF_DIGEST},		PR_FALSE},
@@ -396,6 +397,12 @@
      {CKM_TLS_PRF_GENERAL,	{0, 512, CKF_SN_VR},		PR_FALSE},
      {CKM_NSS_TLS_PRF_GENERAL_SHA256,
 				{0, 512, CKF_SN_VR},		PR_FALSE},
+    
+    
+   //add by liqiangqiang from
+    {CKM_NSS_TLS_PRF_GENERAL_SM3, {0, 512, CKF_SN_VR},	PR_FALSE},
+   //add by liqiangqiang to
+    
      /* ------------------------- HKDF Operations -------------------------- */
      {CKM_NSS_HKDF_SHA1,        {1, 128, CKF_DERIVE},           PR_TRUE},
      {CKM_NSS_HKDF_SHA256,      {1, 128, CKF_DERIVE},           PR_TRUE},
@@ -506,7 +513,30 @@
      {CKM_NSS_JPAKE_FINAL_SHA512,       {0, 0, CKF_DERIVE}, PR_TRUE},
      /* -------------------- Constant Time TLS MACs ----------------------- */
      {CKM_NSS_HMAC_CONSTANT_TIME,       {0, 0, CKF_DIGEST}, PR_TRUE},
-     {CKM_NSS_SSL3_MAC_CONSTANT_TIME,   {0, 0, CKF_DIGEST}, PR_TRUE}
+     {CKM_NSS_SSL3_MAC_CONSTANT_TIME,   {0, 0, CKF_DIGEST}, PR_TRUE},
+    
+    //add by liqiangqiang from
+    /* ------------------------- SM4 Operations --------------------------- */
+    {CKM_SM4_KEY_GEN,		{16, 16, CKF_GENERATE},		PR_TRUE},
+    {CKM_SM4_ECB,		{16, 16, CKF_EN_DE_WR_UN},	PR_TRUE},
+    {CKM_SM4_CBC,		{16, 16, CKF_EN_DE_WR_UN},	PR_TRUE},
+    {CKM_SM4_MAC,		{16, 16, CKF_SN_VR},		PR_TRUE},
+    {CKM_SM4_MAC_GENERAL,	{16, 16, CKF_SN_VR},		PR_TRUE},
+    {CKM_SM4_CBC_PAD,		{16, 16, CKF_EN_DE_WR_UN},	PR_TRUE},
+    /* -------------------------SM3 Hashing Operations ----------------------- */
+    {CKM_SSL3_SHA1_MAC,		{ 0, 32, CKF_DERIVE},   PR_FALSE},
+    {CKM_SM3,		{0,   0, CKF_DIGEST},		PR_FALSE},
+    {CKM_SM3_HMAC,		{1, 128, CKF_SN_VR},		PR_TRUE},
+    {CKM_SM3_HMAC_GENERAL,	{1, 128, CKF_SN_VR},		PR_TRUE},
+    /* -------------------- Elliptic Curve Operations --------------------- */
+    {CKM_SM2_KEY_PAIR_GEN,      {256, 256, CKF_GENERATE_KEY_PAIR|CKF_EC_BPNU}, PR_TRUE},
+    {CKM_SM2,                {256, 256, CKF_SN_VR|CKF_EC_BPNU}, PR_TRUE},
+    {CKM_SM2_SHA1,           {256, 256, CKF_SN_VR|CKF_EC_BPNU}, PR_TRUE},
+    {CKM_SM2_SHA256,           {256, 256, CKF_SN_VR|CKF_EC_BPNU}, PR_TRUE},
+    {CKM_SM2_SM3,           {256, 256, CKF_SN_VR|CKF_EC_BPNU}, PR_TRUE},
+	//add by liqiangqiang to
+
+    
 };
 static const CK_ULONG mechanismCount = sizeof(mechanisms)/sizeof(mechanisms[0]);
 
@@ -2176,15 +2206,15 @@
 
     switch (slotID) {
     case NETSCAPE_SLOT_ID:
-	return "NSS Generic Crypto Services     ";
+	return "itrus Generic Crypto Services   ";
     case PRIVATE_KEY_SLOT_ID:
-	return "NSS Certificate DB              ";
+	return "itrus Certificate DB            ";
     case FIPS_SLOT_ID:
-        return "NSS FIPS 140-2 Certificate DB   ";
+        return "itrus FIPS 140-2 Certificate DB ";
     default:
 	break;
     }
-    sprintf(buf,"NSS Application Token %08x  ",(unsigned int) slotID);
+    sprintf(buf,"itrus Application Token %08x",(unsigned int) slotID);
     return buf;
 }
 
@@ -2196,18 +2226,18 @@
     switch (slotID) {
     case NETSCAPE_SLOT_ID:
 	return 
-	 "NSS Internal Cryptographic Services                             ";
+	 "itrus Internal Cryptographic Services                           ";
     case PRIVATE_KEY_SLOT_ID:
 	return 
-	 "NSS User Private Key and Certificate Services                   ";
+	 "itrus User Private Key and Certificate Services                 ";
     case FIPS_SLOT_ID:
         return 
-         "NSS FIPS 140-2 User Private Key Services                        ";
+         "itrus FIPS 140-2 User Private Key Services                      ";
     default:
 	break;
     }
     sprintf(buf,
-     "NSS Application Slot %08x                                   ",
+     "itrus Application Slot %08x                                 ",
 							(unsigned int) slotID);
     return buf;
 }
@@ -3203,7 +3233,7 @@
     if (slot == NULL) return CKR_SLOT_ID_INVALID;
 
     PORT_Memcpy(pInfo->manufacturerID,manufacturerID,32);
-    PORT_Memcpy(pInfo->model,"NSS 3           ",16);
+    PORT_Memcpy(pInfo->model,"itrus           ",16);
     PORT_Memcpy(pInfo->serialNumber,"0000000000000000",16);
     PORT_Memcpy(pInfo->utcTime,"0000000000000000",16);
     pInfo->ulMaxSessionCount = 0; /* arbitrarily large */
Index: pkcs11c.c
===================================================================
--- pkcs11c.c	(版本 235644)
+++ pkcs11c.c	(工作副本)
@@ -92,6 +92,37 @@
     PORT_Free(data);
 } 
 
+
+//add by liqiangqiang from
+static int
+sftk_sm4_mode(CK_MECHANISM_TYPE mechanism)
+{
+    switch (mechanism) {
+        case CKM_SM4_CBC_PAD:
+        case CKM_SM4_CBC:
+            return NSS_SM4_CBC;
+        case CKM_SM4_ECB:
+        case CKM_SM4_ECB_PAD:
+            return NSS_SM4;
+    }
+    return -1;
+}
+static int
+sftk_sm1_mode(CK_MECHANISM_TYPE mechanism)
+{
+    switch (mechanism) {
+        case CKM_SM1_CBC_PAD:
+        case CKM_SM1_CBC:
+            return NSS_SM1_CBC;
+        case CKM_SM1_ECB:
+        case CKM_SM1_ECB_PAD:
+            return NSS_SM1;
+    }
+    return -1;
+}
+//add by liqiangqiang to
+
+
 /*
  * map all the SEC_ERROR_xxx error codes that may be returned by freebl
  * functions to CKR_xxx.  return CKR_DEVICE_ERROR by default for backward
@@ -960,6 +991,71 @@
 	context->update = (SFTKCipher) (isEncrypt ? AES_Encrypt : AES_Decrypt);
 	context->destroy = (SFTKDestroy) AES_DestroyContext;
 	break;
+            
+           //add by liqiangqiang from
+        case CKM_SM4_CBC_PAD:
+            context->doPad = PR_TRUE;
+            /* fall thru */
+        case CKM_SM4_ECB:
+        case CKM_SM4_CBC:
+            context->blockSize = 16;
+            
+            if (key_type != CKK_SM4) {
+                crv = CKR_KEY_TYPE_INCONSISTENT;
+                break;
+            }
+            att = sftk_FindAttribute(key,CKA_VALUE);
+            if (att == NULL) {
+                crv = CKR_KEY_HANDLE_INVALID;
+                break;
+            }
+            
+            
+            context->cipherInfo = SM4_CreateContext(
+                                                    (unsigned char*)att->attrib.pValue,
+                                                    (unsigned char*)pMechanism->pParameter,
+                                                    sftk_sm4_mode(pMechanism->mechanism),
+                                                    isEncrypt);
+            sftk_FreeAttribute(att);
+            if (context->cipherInfo == NULL) {
+                crv = CKR_HOST_MEMORY;
+                break;
+            }
+            context->update = (SFTKCipher) (isEncrypt ? SM4_Encrypt : SM4_Decrypt);
+            context->destroy = (SFTKDestroy) SM4_DestroyContext;
+            break;
+//            
+//            //---------------------------------------------------------------------
+//        case CKM_SM1_CBC_PAD:
+//            context->doPad = PR_TRUE;
+//            /* fall thru */
+//        case CKM_SM1_ECB:
+//        case CKM_SM1_CBC:
+//            context->blockSize = 16;
+//            
+//            if (key_type != CKK_SM1) {
+//                crv = CKR_KEY_TYPE_INCONSISTENT;
+//                break;
+//            }
+//            att = sftk_FindAttribute(key,CKA_VALUE);
+//            if (att == NULL) {
+//                crv = CKR_KEY_HANDLE_INVALID;
+//                break;
+//            }
+//            context->cipherInfo = SM1_CreateContext(
+//                                                    (unsigned char*)att->attrib.pValue,
+//                                                    (unsigned char*)pMechanism->pParameter,
+//                                                    sftk_sm1_mode(pMechanism->mechanism),
+//                                                    isEncrypt);
+//            sftk_FreeAttribute(att);
+//            if (context->cipherInfo == NULL) {
+//                crv = CKR_HOST_MEMORY;
+//                break;
+//            }
+//            context->update = (SFTKCipher) (isEncrypt ? SM1_Encrypt : SM1_Decrypt);
+//            context->destroy = (SFTKDestroy) SM1_DestroyContext;
+//            break;
+//add by liqiangqiang to
 
     case CKM_NSS_CHACHA20_POLY1305:
 	if (pMechanism->ulParameterLen != sizeof(CK_NSS_AEAD_PARAMS)) {
@@ -1519,6 +1615,7 @@
     switch(pMechanism->mechanism) {
     INIT_MECH(CKM_MD2,    MD2)
     INIT_MECH(CKM_MD5,    MD5)
+            INIT_MECH(CKM_SM3,    SM3)   //add by liqiangqiang
     INIT_MECH(CKM_SHA_1,  SHA1)
     INIT_MECH(CKM_SHA224, SHA224)
     INIT_MECH(CKM_SHA256, SHA256)
@@ -1648,6 +1745,7 @@
 DOSUB(SHA256)
 DOSUB(SHA384)
 DOSUB(SHA512)
+DOSUB(SM3) //add by liqiangqiang
 
 static SECStatus
 sftk_SignCopy(
@@ -1975,6 +2073,18 @@
 	cbc_mechanism.pParameter = &ivBlock;
 	cbc_mechanism.ulParameterLen = blockSize;
 	break;
+            //add by liqiangqiang from
+        case CKM_SM4_MAC_GENERAL:
+            mac_bytes = *(CK_ULONG *)pMechanism->pParameter;
+            /* fall through */
+        case CKM_SM4_MAC:
+            blockSize = 16;
+            PORT_Memset(ivBlock,0,blockSize);
+            cbc_mechanism.mechanism = CKM_SM4_CBC;
+            cbc_mechanism.pParameter = &ivBlock;
+            cbc_mechanism.ulParameterLen = blockSize;
+            break;
+            //add by liqiangqiang to
     default:
 	return CKR_FUNCTION_NOT_SUPPORTED;
     }
@@ -2229,6 +2339,7 @@
     INIT_RSA_SIGN_MECH(SHA256)
     INIT_RSA_SIGN_MECH(SHA384)
     INIT_RSA_SIGN_MECH(SHA512)
+    INIT_RSA_SIGN_MECH(SM3)  //add by liqiangqiang
 
     case CKM_RSA_PKCS:
 	context->update = (SFTKCipher) RSA_Sign;
@@ -2349,6 +2460,7 @@
     INIT_HMAC_MECH(SHA256)
     INIT_HMAC_MECH(SHA384)
     INIT_HMAC_MECH(SHA512)
+     INIT_HMAC_MECH(SM3)         //add by liqiangqiang
 
     case CKM_SHA_1_HMAC_GENERAL:
 	crv = sftk_doHMACInit(context,HASH_AlgSHA1,key,
@@ -2357,7 +2469,17 @@
     case CKM_SHA_1_HMAC:
 	crv = sftk_doHMACInit(context,HASH_AlgSHA1,key,SHA1_LENGTH);
 	break;
+            
+            
+            //add by liqiangqiang from
+        case CKM_SSL3_SM3_MAC:
+            crv = sftk_doSSLMACInit(context,SEC_OID_SM3,key,
+                                    *(CK_ULONG *)pMechanism->pParameter);
+            break;
 
+            //add by liqiangqiang to
+            
+
     case CKM_SSL3_MD5_MAC:
 	crv = sftk_doSSLMACInit(context,SEC_OID_MD5,key,
 					*(CK_ULONG *)pMechanism->pParameter);
@@ -2808,7 +2930,8 @@
     INIT_RSA_VFY_MECH(SHA224)
     INIT_RSA_VFY_MECH(SHA256) 
     INIT_RSA_VFY_MECH(SHA384) 
-    INIT_RSA_VFY_MECH(SHA512) 
+    INIT_RSA_VFY_MECH(SHA512)
+            INIT_RSA_VFY_MECH(SM3)  //add by liqiangqiang
 
     case CKM_RSA_PKCS:
 	context->verify = (SFTKVerify) RSA_CheckSign;
@@ -2908,6 +3031,7 @@
     INIT_HMAC_MECH(SHA256)
     INIT_HMAC_MECH(SHA384)
     INIT_HMAC_MECH(SHA512)
+            INIT_HMAC_MECH(SM3) //add by liqiangqiang
 
     case CKM_SHA_1_HMAC_GENERAL:
 	crv = sftk_doHMACInit(context,HASH_AlgSHA1,key,
@@ -2925,6 +3049,15 @@
 	crv = sftk_doSSLMACInit(context,SEC_OID_SHA1,key,
 					*(CK_ULONG *)pMechanism->pParameter);
 	break;
+            //add by liqiangqiang from
+        case CKM_SSL3_SM3_MAC:   
+            crv = sftk_doSSLMACInit(context,SEC_OID_SM3,key,
+                                    *(CK_ULONG *)pMechanism->pParameter);
+            break;
+        case CKM_NSS_TLS_PRF_GENERAL_SM3:
+            crv = sftk_TLSPRFInit(context, key, key_type, HASH_AlgSM3);
+            break;
+           //add by liqiangqiang to            
     case CKM_TLS_PRF_GENERAL:
 	crv = sftk_TLSPRFInit(context, key, key_type, HASH_AlgNULL);
 	break;
@@ -3392,10 +3525,14 @@
 	*key_type = CKK_AES;
 	if (*key_length == 0) crv = CKR_TEMPLATE_INCOMPLETE;
 	break;
-    case CKM_NSS_CHACHA20_KEY_GEN:
-	*key_type = CKK_NSS_CHACHA20;
-	if (*key_length == 0) crv = CKR_TEMPLATE_INCOMPLETE;
-	break;
+            //add by liqiangqiang form
+            case CKM_SM4_KEY_GEN:
+            *key_type = CKK_SM4;
+            if (*key_length == 0) crv = CKR_TEMPLATE_INCOMPLETE;
+            break;
+            //add by liqiangqiang to
+            
+            
     default:
 	PORT_Assert(0);
 	crv = CKR_MECHANISM_INVALID;
@@ -3642,6 +3779,8 @@
     case CKM_CAMELLIA_KEY_GEN:
     case CKM_AES_KEY_GEN:
     case CKM_NSS_CHACHA20_KEY_GEN:
+            case CKM_SM4_KEY_GEN: //add by liqiangqiang
+            
 #if NSS_SOFTOKEN_DOES_RC5
     case CKM_RC5_KEY_GEN:
 #endif
@@ -6446,7 +6585,19 @@
 
 	crv = sftk_forceAttribute(key,CKA_VALUE,key_block,keySize);
 	break;
-
+            //add by liqiangqiang from
+        case CKM_SM3_KEY_DERIVATION:
+            if (keySize == 0) keySize = SM3_LENGTH;
+            if (keySize > SHA256_LENGTH) {
+                crv = CKR_TEMPLATE_INCONSISTENT;
+                break;
+            }
+            SM3_HashBuf(key_block,(const unsigned char*)att->attrib.pValue,
+                           att->attrib.ulValueLen);
+            
+            crv = sftk_forceAttribute(key,CKA_VALUE,key_block,keySize);
+            break;
+            //add by liqiangqiang to
      case CKM_SHA384_KEY_DERIVATION:
 	if (keySize == 0) keySize = SHA384_LENGTH;
 	if (keySize > SHA384_LENGTH) {
Index: rsawrapr.c
===================================================================
--- rsawrapr.c	(版本 235644)
+++ rsawrapr.c	(工作副本)
@@ -1192,6 +1192,14 @@
         case CKM_SHA_1:
         case CKG_MGF1_SHA1:
 	    return HASH_AlgSHA1;
+            
+            
+            //add by liqiangqiang from
+            
+        case CKM_SM3:
+        case CKG_MGF1_SM3:
+            return HASH_AlgSM3;
+            //add by liqiangqiang to
         case CKM_SHA224:
         case CKG_MGF1_SHA224:
 	    return HASH_AlgSHA224;
Index: sdb.c
===================================================================
--- sdb.c	(版本 235644)
+++ sdb.c	(工作副本)
@@ -626,6 +626,13 @@
 	return sqlerr;
     }
 
+    sqlerr = sqlite3_key(*sqlDB, "itrus", 5);
+    if (sqlerr != SQLITE_OK) {
+        sqlite3_close(*sqlDB);
+        *sqlDB = NULL;
+        return sqlerr;
+    }
+    
     sqlerr = sqlite3_busy_timeout(*sqlDB, SDB_SQLITE_BUSY_TIMEOUT);
     if (sqlerr != SQLITE_OK) {
 	sqlite3_close(*sqlDB);
Index: sftkhmac.c
===================================================================
--- sftkhmac.c	(版本 235644)
+++ sftkhmac.c	(工作副本)
@@ -29,6 +29,12 @@
 	    return HASH_AlgSHA384;
 	case CKM_SHA512_HMAC:
 	    return HASH_AlgSHA512;
+            //add by liqiangqiang from
+        case CKM_SM3_HMAC:				
+        case CKM_SSL3_SM3_MAC:
+            return HASH_AlgSM3;
+            //add by liqiangqiang to
+            
     }
     return HASH_AlgNULL;
 }
@@ -105,9 +111,14 @@
 	(CK_NSS_MAC_CONSTANT_TIME_PARAMS *) mech->pParameter;
     unsigned int padLength = 40, j;
     sftk_MACConstantTimeCtx *ctx;
+    
+    
+    if (params->macAlg != CKM_SSL3_MD5_MAC
+		&&	params->macAlg != CKM_SSL3_SHA1_MAC
+		&&	params->macAlg != CKM_SSL3_SM3_MAC) {  //add by liqiangqiang from
 
-    if (params->macAlg != CKM_SSL3_MD5_MAC &&
-	params->macAlg != CKM_SSL3_SHA1_MAC) {
+//    if (params->macAlg != CKM_SSL3_MD5_MAC &&
+//	params->macAlg != CKM_SSL3_SHA1_MAC) {
 	return NULL;
     }
     ctx = SetupMAC(mech, key);

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "sms4.h"

//Define Error Code
#define NO_ERR				0
#define PARAM_ERR			-1
#define DATA_LEN_ERR		-2
#define DATA_ERR			-3
#define NO_MEMORY_ERR		-4
#define BUFFER_SMALL_ERR	-5
#define UNKNOWN_ERR         -6
#define NOT_INITIAL_ERR     -7

#define SMS4_ROUND			32

#define SwapDWORD(x)	(((x) >> 24) | (((x) >> 8) & 0x0000ff00) | (((x) << 8) & 0x00ff0000) | (((x) << 24) & 0xff000000))

#define ROL(x,y)		((x)<<(y) | (x)>>(32-(y)))								// 循环移位
#define SMS4_8TO32(x) 	(((*x)<<24) | ((*(x+1))<<16) | ((*(x+2))<<8) | *(x+3))	// 8位到32位转换

static unsigned int FK[4]={
    0xA3B1BAC6,0x56AA3350,0x677D9197,0xB27022DC
};

static unsigned int CK[SMS4_ROUND]={
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
};

static unsigned char Sbox[256]={
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};


// 加解密中的T变换
unsigned int T1(unsigned int uA)
{
    unsigned int uB, uC;	// uB保存非线性结果，uC保存合成结果
	
	uB = Sbox[(unsigned char)uA] | 
		(Sbox[(unsigned char)(uA >> 8)] << 8) | 
		(Sbox[(unsigned char)(uA >> 16)] << 16) | 
		(Sbox[(unsigned char)(uA >> 24)] << 24);
		
    uC = uB ^ ROL(uB,2) ^ ROL(uB,10) ^ ROL(uB,18) ^ ROL(uB,24);

	return uC;
}

// 密钥扩展中的T'变换
unsigned int T2(unsigned int uA)
{
    unsigned int uB, uC;

	uB = Sbox[(unsigned char)uA] | 
		(Sbox[(unsigned char)(uA >> 8)] << 8) | 
		(Sbox[(unsigned char)(uA >> 16)] << 16) | 
		(Sbox[(unsigned char)(uA >> 24)] << 24);
	
    uC = uB ^ ROL(uB,13) ^ ROL(uB,23);

	return uC;
}

// 密钥扩展函数
int SMS4KeyExpansion(unsigned char *pbKey, unsigned int *puRK)
{
    unsigned int uMK[4], uK[36];
    unsigned char bCycleCount = 0;

    for (bCycleCount = 0; bCycleCount < 4; bCycleCount++)
    {
		uMK[bCycleCount] = SMS4_8TO32(&pbKey[bCycleCount*4]);
        uK[bCycleCount] = uMK[bCycleCount] ^ FK[bCycleCount];
    }

    for (bCycleCount = 0; bCycleCount < SMS4_ROUND; bCycleCount++)
    {
		uK[bCycleCount+4] = uK[bCycleCount] ^ 
						T2(uK[bCycleCount+1] ^ uK[bCycleCount+2] ^ uK[bCycleCount+3] ^ CK[bCycleCount]);
        puRK[bCycleCount] = uK[bCycleCount+4];
    }
    
    return NO_ERR;
}

// 加密函数
int SMS4EncryptECB(unsigned char *pbKey, unsigned char *pbInData, unsigned int uInDataLen, unsigned char *pbOutData)
{
	unsigned int uRK[SMS4_ROUND], uTemp[36], uTempbOutData[4];
	unsigned int uBlockNum = 0, uI = 0, uJ = 0;
	
	if(!pbKey || !pbInData || !pbOutData)
	{
		return PARAM_ERR;
	}
	
	if(0 != uInDataLen % SMS4_BLOCK_LEN)
	{
		return DATA_LEN_ERR;
	}
	
	// 密钥扩展
    SMS4KeyExpansion(pbKey, uRK);

	uBlockNum = uInDataLen / SMS4_BLOCK_LEN;
	for(uI = 0; uI < uBlockNum; uI++)
	{
		for(uJ = 0; uJ < 4; uJ++)
		{
			uTemp[uJ] = SMS4_8TO32(&pbInData[uI*SMS4_BLOCK_LEN + uJ*4]);
		}
		
		for(uJ = 0; uJ < SMS4_ROUND; uJ++)
		{
			uTemp[uJ+4] = uTemp[uJ] ^ 
							T1(uTemp[uJ+1] ^ uTemp[uJ+2] ^ uTemp[uJ+3] ^ uRK[uJ]);
		}
		
		for (uJ = 0; uJ < 4; uJ++)
		{
			uTempbOutData[uJ] = SwapDWORD(uTemp[35-uJ]);
		}
		
		memcpy(pbOutData + (uI * SMS4_BLOCK_LEN), uTempbOutData, SMS4_BLOCK_LEN);
	}
	return NO_ERR;
}

// 解密函数
int SMS4DecryptECB(unsigned char *pbKey, unsigned char *pbInData, unsigned int uInDataLen, unsigned char *pbOutData)
{
	unsigned int uRK[SMS4_ROUND], uTemp[36], uTempbOutData[4];
	unsigned int uBlockNum = 0, uI = 0, uJ = 0;
	
	if(!pbKey || !pbInData || !pbOutData)
	{
		return PARAM_ERR;
	}
	
	if(uInDataLen % SMS4_BLOCK_LEN)
	{
		return DATA_LEN_ERR;
	}
	
	// 密钥扩展
    SMS4KeyExpansion(pbKey, uRK);
	
	uBlockNum = uInDataLen / SMS4_BLOCK_LEN;

	for(uI = 0; uI < uBlockNum; uI++)
	{
		for(uJ = 0; uJ < 4; uJ++)
			uTemp[uJ] = SMS4_8TO32(&pbInData[uI*SMS4_BLOCK_LEN + uJ*4]);
		
		for(uJ = 0; uJ < SMS4_ROUND; uJ++)
		{
			uTemp[uJ+4] = uTemp[uJ] ^ 
							T1(uTemp[uJ+1] ^ uTemp[uJ+2] ^ uTemp[uJ+3] ^ uRK[31-uJ]);
		}

		for (uJ = 0; uJ < 4; uJ++)
		{
			uTempbOutData[uJ] = SwapDWORD(uTemp[35-uJ]);
		}

		memcpy(pbOutData + uI*SMS4_BLOCK_LEN, uTempbOutData, SMS4_BLOCK_LEN);
	}
	return NO_ERR;
}


unsigned int tcm_sms4_encrypt(unsigned char *IV, unsigned char *input, unsigned int inputLen, unsigned char *output, unsigned char *key)
{
	unsigned int ret = NO_ERR;
	unsigned int uBlockIndex = 0, uI = 0;
	unsigned char myIV[SMS4_BLOCK_LEN],bTempInput[SMS4_BLOCK_LEN];
	
	if(!key || !input || !output || !IV)
	{
		return PARAM_ERR;
	}
	
	if(inputLen % SMS4_BLOCK_LEN)
	{
		return DATA_LEN_ERR;
	}
	
	memcpy(myIV, IV, SMS4_BLOCK_LEN);
	while(uBlockIndex*SMS4_BLOCK_LEN < inputLen)
	{
		memcpy(bTempInput, input + uBlockIndex*SMS4_BLOCK_LEN, SMS4_BLOCK_LEN );
		// CBC异或
		for(uI = 0; uI < SMS4_BLOCK_LEN; uI++)
		{
			bTempInput[uI] = input[uBlockIndex*SMS4_BLOCK_LEN + uI] ^ myIV[uI];
		}
	
		ret = SMS4EncryptECB(key, bTempInput, SMS4_BLOCK_LEN, &output[uBlockIndex*SMS4_BLOCK_LEN]);
		if(NO_ERR != ret)
		{
			goto err;
		}
		
		// 得到新的IV值
		memcpy(myIV, &output[uBlockIndex*SMS4_BLOCK_LEN], SMS4_BLOCK_LEN);
	
		uBlockIndex++;
	}

	return NO_ERR;
err:
	return ret;
}

unsigned int tcm_sms4_decrypt(unsigned char *IV, unsigned char *input, unsigned int inputLen, unsigned char *output, unsigned char *key)
{
	unsigned int ret = NO_ERR;
	unsigned int uBlockIndex = 0, uI = 0;
	unsigned char myIV[SMS4_BLOCK_LEN],tempIV[SMS4_BLOCK_LEN];
	
	if(!key || !input || !output || !IV)
	{
		return PARAM_ERR;
	}
	
	if(inputLen % SMS4_BLOCK_LEN)
	{
		return DATA_LEN_ERR;
	}
	
	memcpy(myIV, IV, SMS4_BLOCK_LEN);
	while(uBlockIndex*SMS4_BLOCK_LEN < inputLen)
	{
		// 保存IV值
		memcpy(tempIV, &input[uBlockIndex*SMS4_BLOCK_LEN], SMS4_BLOCK_LEN);
		
		ret = SMS4DecryptECB(key, &input[uBlockIndex*SMS4_BLOCK_LEN], SMS4_BLOCK_LEN, &output[uBlockIndex*SMS4_BLOCK_LEN]);
		if(NO_ERR != ret)
		{
			goto err;
		}
		
		// CBC异或
		for(uI = 0; uI < SMS4_BLOCK_LEN; uI++)
		{
			output[uBlockIndex*SMS4_BLOCK_LEN + uI] = output[uBlockIndex*SMS4_BLOCK_LEN + uI] ^ myIV[uI];
		}
		
		// 得到新的IV值
		memcpy(myIV, tempIV, SMS4_BLOCK_LEN);
	
		uBlockIndex++;
	}

	return NO_ERR;
err:
	return ret;
}

